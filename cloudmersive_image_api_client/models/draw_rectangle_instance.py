# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DrawRectangleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'border_color': 'str',
        'border_width': 'float',
        'fill_color': 'str',
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float'
    }

    attribute_map = {
        'border_color': 'BorderColor',
        'border_width': 'BorderWidth',
        'fill_color': 'FillColor',
        'x': 'X',
        'y': 'Y',
        'width': 'Width',
        'height': 'Height'
    }

    def __init__(self, border_color=None, border_width=None, fill_color=None, x=None, y=None, width=None, height=None):  # noqa: E501
        """DrawRectangleInstance - a model defined in Swagger"""  # noqa: E501

        self._border_color = None
        self._border_width = None
        self._fill_color = None
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self.discriminator = None

        if border_color is not None:
            self.border_color = border_color
        if border_width is not None:
            self.border_width = border_width
        if fill_color is not None:
            self.fill_color = fill_color
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height

    @property
    def border_color(self):
        """Gets the border_color of this DrawRectangleInstance.  # noqa: E501

        Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  # noqa: E501

        :return: The border_color of this DrawRectangleInstance.  # noqa: E501
        :rtype: str
        """
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        """Sets the border_color of this DrawRectangleInstance.

        Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  # noqa: E501

        :param border_color: The border_color of this DrawRectangleInstance.  # noqa: E501
        :type: str
        """

        self._border_color = border_color

    @property
    def border_width(self):
        """Gets the border_width of this DrawRectangleInstance.  # noqa: E501

        Width in pixels of the border.  Pass in 0 to draw a rectangle with no border  # noqa: E501

        :return: The border_width of this DrawRectangleInstance.  # noqa: E501
        :rtype: float
        """
        return self._border_width

    @border_width.setter
    def border_width(self, border_width):
        """Sets the border_width of this DrawRectangleInstance.

        Width in pixels of the border.  Pass in 0 to draw a rectangle with no border  # noqa: E501

        :param border_width: The border_width of this DrawRectangleInstance.  # noqa: E501
        :type: float
        """

        self._border_width = border_width

    @property
    def fill_color(self):
        """Gets the fill_color of this DrawRectangleInstance.  # noqa: E501

        Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the rectangle.  # noqa: E501

        :return: The fill_color of this DrawRectangleInstance.  # noqa: E501
        :rtype: str
        """
        return self._fill_color

    @fill_color.setter
    def fill_color(self, fill_color):
        """Sets the fill_color of this DrawRectangleInstance.

        Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the rectangle.  # noqa: E501

        :param fill_color: The fill_color of this DrawRectangleInstance.  # noqa: E501
        :type: str
        """

        self._fill_color = fill_color

    @property
    def x(self):
        """Gets the x of this DrawRectangleInstance.  # noqa: E501

        Pixel location of the left edge of the rectangle location  # noqa: E501

        :return: The x of this DrawRectangleInstance.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DrawRectangleInstance.

        Pixel location of the left edge of the rectangle location  # noqa: E501

        :param x: The x of this DrawRectangleInstance.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this DrawRectangleInstance.  # noqa: E501

        Pixel location of the top edge of the rectangle location  # noqa: E501

        :return: The y of this DrawRectangleInstance.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DrawRectangleInstance.

        Pixel location of the top edge of the rectangle location  # noqa: E501

        :param y: The y of this DrawRectangleInstance.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def width(self):
        """Gets the width of this DrawRectangleInstance.  # noqa: E501

        Width in pixels of the rectangle  # noqa: E501

        :return: The width of this DrawRectangleInstance.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DrawRectangleInstance.

        Width in pixels of the rectangle  # noqa: E501

        :param width: The width of this DrawRectangleInstance.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this DrawRectangleInstance.  # noqa: E501

        Height in pixels of the rectangle  # noqa: E501

        :return: The height of this DrawRectangleInstance.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DrawRectangleInstance.

        Height in pixels of the rectangle  # noqa: E501

        :param height: The height of this DrawRectangleInstance.  # noqa: E501
        :type: float
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrawRectangleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrawRectangleInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
