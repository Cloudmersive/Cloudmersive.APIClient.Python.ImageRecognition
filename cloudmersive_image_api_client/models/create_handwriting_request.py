# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateHandwritingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text_input': 'str',
        'target_width': 'int',
        'stroke_width': 'int',
        'color': 'str'
    }

    attribute_map = {
        'text_input': 'TextInput',
        'target_width': 'TargetWidth',
        'stroke_width': 'StrokeWidth',
        'color': 'Color'
    }

    def __init__(self, text_input=None, target_width=None, stroke_width=None, color=None):  # noqa: E501
        """CreateHandwritingRequest - a model defined in Swagger"""  # noqa: E501

        self._text_input = None
        self._target_width = None
        self._stroke_width = None
        self._color = None
        self.discriminator = None

        if text_input is not None:
            self.text_input = text_input
        if target_width is not None:
            self.target_width = target_width
        if stroke_width is not None:
            self.stroke_width = stroke_width
        if color is not None:
            self.color = color

    @property
    def text_input(self):
        """Gets the text_input of this CreateHandwritingRequest.  # noqa: E501

        Text to convert to handwriting  # noqa: E501

        :return: The text_input of this CreateHandwritingRequest.  # noqa: E501
        :rtype: str
        """
        return self._text_input

    @text_input.setter
    def text_input(self, text_input):
        """Sets the text_input of this CreateHandwritingRequest.

        Text to convert to handwriting  # noqa: E501

        :param text_input: The text_input of this CreateHandwritingRequest.  # noqa: E501
        :type: str
        """

        self._text_input = text_input

    @property
    def target_width(self):
        """Gets the target_width of this CreateHandwritingRequest.  # noqa: E501

        Desired width in pixels of the resulting image  # noqa: E501

        :return: The target_width of this CreateHandwritingRequest.  # noqa: E501
        :rtype: int
        """
        return self._target_width

    @target_width.setter
    def target_width(self, target_width):
        """Sets the target_width of this CreateHandwritingRequest.

        Desired width in pixels of the resulting image  # noqa: E501

        :param target_width: The target_width of this CreateHandwritingRequest.  # noqa: E501
        :type: int
        """

        self._target_width = target_width

    @property
    def stroke_width(self):
        """Gets the stroke_width of this CreateHandwritingRequest.  # noqa: E501

        Optinoal; Width of the text stroke in pixels; default is 2  # noqa: E501

        :return: The stroke_width of this CreateHandwritingRequest.  # noqa: E501
        :rtype: int
        """
        return self._stroke_width

    @stroke_width.setter
    def stroke_width(self, stroke_width):
        """Sets the stroke_width of this CreateHandwritingRequest.

        Optinoal; Width of the text stroke in pixels; default is 2  # noqa: E501

        :param stroke_width: The stroke_width of this CreateHandwritingRequest.  # noqa: E501
        :type: int
        """

        self._stroke_width = stroke_width

    @property
    def color(self):
        """Gets the color of this CreateHandwritingRequest.  # noqa: E501

        HTML hexadecimal color, or HTML common color name (e.g. 'black', 'red'), for the handwriting  # noqa: E501

        :return: The color of this CreateHandwritingRequest.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreateHandwritingRequest.

        HTML hexadecimal color, or HTML common color name (e.g. 'black', 'red'), for the handwriting  # noqa: E501

        :param color: The color of this CreateHandwritingRequest.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateHandwritingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateHandwritingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
