# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FineTextItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top_left_x': 'int',
        'top_left_y': 'int',
        'top_right_x': 'int',
        'top_right_y': 'int',
        'bottom_left_x': 'int',
        'bottom_left_y': 'int',
        'bottom_right_x': 'int',
        'bottom_right_y': 'int',
        'width': 'int',
        'height': 'int',
        'angle': 'float'
    }

    attribute_map = {
        'top_left_x': 'TopLeftX',
        'top_left_y': 'TopLeftY',
        'top_right_x': 'TopRightX',
        'top_right_y': 'TopRightY',
        'bottom_left_x': 'BottomLeftX',
        'bottom_left_y': 'BottomLeftY',
        'bottom_right_x': 'BottomRightX',
        'bottom_right_y': 'BottomRightY',
        'width': 'Width',
        'height': 'Height',
        'angle': 'Angle'
    }

    def __init__(self, top_left_x=None, top_left_y=None, top_right_x=None, top_right_y=None, bottom_left_x=None, bottom_left_y=None, bottom_right_x=None, bottom_right_y=None, width=None, height=None, angle=None):  # noqa: E501
        """FineTextItem - a model defined in Swagger"""  # noqa: E501

        self._top_left_x = None
        self._top_left_y = None
        self._top_right_x = None
        self._top_right_y = None
        self._bottom_left_x = None
        self._bottom_left_y = None
        self._bottom_right_x = None
        self._bottom_right_y = None
        self._width = None
        self._height = None
        self._angle = None
        self.discriminator = None

        if top_left_x is not None:
            self.top_left_x = top_left_x
        if top_left_y is not None:
            self.top_left_y = top_left_y
        if top_right_x is not None:
            self.top_right_x = top_right_x
        if top_right_y is not None:
            self.top_right_y = top_right_y
        if bottom_left_x is not None:
            self.bottom_left_x = bottom_left_x
        if bottom_left_y is not None:
            self.bottom_left_y = bottom_left_y
        if bottom_right_x is not None:
            self.bottom_right_x = bottom_right_x
        if bottom_right_y is not None:
            self.bottom_right_y = bottom_right_y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if angle is not None:
            self.angle = angle

    @property
    def top_left_x(self):
        """Gets the top_left_x of this FineTextItem.  # noqa: E501

        X coordinate of the top/left text location; 0 represents the left edge of the input image  # noqa: E501

        :return: The top_left_x of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._top_left_x

    @top_left_x.setter
    def top_left_x(self, top_left_x):
        """Sets the top_left_x of this FineTextItem.

        X coordinate of the top/left text location; 0 represents the left edge of the input image  # noqa: E501

        :param top_left_x: The top_left_x of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._top_left_x = top_left_x

    @property
    def top_left_y(self):
        """Gets the top_left_y of this FineTextItem.  # noqa: E501

        Y coordinate of the top/left text location; 0 represents the top edge of the input image  # noqa: E501

        :return: The top_left_y of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._top_left_y

    @top_left_y.setter
    def top_left_y(self, top_left_y):
        """Sets the top_left_y of this FineTextItem.

        Y coordinate of the top/left text location; 0 represents the top edge of the input image  # noqa: E501

        :param top_left_y: The top_left_y of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._top_left_y = top_left_y

    @property
    def top_right_x(self):
        """Gets the top_right_x of this FineTextItem.  # noqa: E501

        X coordinate of the top/right text location; 0 represents the left edge of the input image  # noqa: E501

        :return: The top_right_x of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._top_right_x

    @top_right_x.setter
    def top_right_x(self, top_right_x):
        """Sets the top_right_x of this FineTextItem.

        X coordinate of the top/right text location; 0 represents the left edge of the input image  # noqa: E501

        :param top_right_x: The top_right_x of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._top_right_x = top_right_x

    @property
    def top_right_y(self):
        """Gets the top_right_y of this FineTextItem.  # noqa: E501

        Y coordinate of the top/right text location; 0 represents the top edge of the input image  # noqa: E501

        :return: The top_right_y of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._top_right_y

    @top_right_y.setter
    def top_right_y(self, top_right_y):
        """Sets the top_right_y of this FineTextItem.

        Y coordinate of the top/right text location; 0 represents the top edge of the input image  # noqa: E501

        :param top_right_y: The top_right_y of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._top_right_y = top_right_y

    @property
    def bottom_left_x(self):
        """Gets the bottom_left_x of this FineTextItem.  # noqa: E501

        X coordinate of the bottom/left text location; 0 represents the left edge of the input image  # noqa: E501

        :return: The bottom_left_x of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._bottom_left_x

    @bottom_left_x.setter
    def bottom_left_x(self, bottom_left_x):
        """Sets the bottom_left_x of this FineTextItem.

        X coordinate of the bottom/left text location; 0 represents the left edge of the input image  # noqa: E501

        :param bottom_left_x: The bottom_left_x of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._bottom_left_x = bottom_left_x

    @property
    def bottom_left_y(self):
        """Gets the bottom_left_y of this FineTextItem.  # noqa: E501

        Y coordinate of the bottom/left text location; 0 represents the top edge of the input image  # noqa: E501

        :return: The bottom_left_y of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._bottom_left_y

    @bottom_left_y.setter
    def bottom_left_y(self, bottom_left_y):
        """Sets the bottom_left_y of this FineTextItem.

        Y coordinate of the bottom/left text location; 0 represents the top edge of the input image  # noqa: E501

        :param bottom_left_y: The bottom_left_y of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._bottom_left_y = bottom_left_y

    @property
    def bottom_right_x(self):
        """Gets the bottom_right_x of this FineTextItem.  # noqa: E501

        X coordinate of the bottom/right text location; 0 represents the left edge of the input image  # noqa: E501

        :return: The bottom_right_x of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._bottom_right_x

    @bottom_right_x.setter
    def bottom_right_x(self, bottom_right_x):
        """Sets the bottom_right_x of this FineTextItem.

        X coordinate of the bottom/right text location; 0 represents the left edge of the input image  # noqa: E501

        :param bottom_right_x: The bottom_right_x of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._bottom_right_x = bottom_right_x

    @property
    def bottom_right_y(self):
        """Gets the bottom_right_y of this FineTextItem.  # noqa: E501

        Y coordinate of the bottom/right text location; 0 represents the top edge of the input image  # noqa: E501

        :return: The bottom_right_y of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._bottom_right_y

    @bottom_right_y.setter
    def bottom_right_y(self, bottom_right_y):
        """Sets the bottom_right_y of this FineTextItem.

        Y coordinate of the bottom/right text location; 0 represents the top edge of the input image  # noqa: E501

        :param bottom_right_y: The bottom_right_y of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._bottom_right_y = bottom_right_y

    @property
    def width(self):
        """Gets the width of this FineTextItem.  # noqa: E501

        Width in pixels of the text  # noqa: E501

        :return: The width of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FineTextItem.

        Width in pixels of the text  # noqa: E501

        :param width: The width of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this FineTextItem.  # noqa: E501

        Height in pixels of the text  # noqa: E501

        :return: The height of this FineTextItem.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FineTextItem.

        Height in pixels of the text  # noqa: E501

        :param height: The height of this FineTextItem.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def angle(self):
        """Gets the angle of this FineTextItem.  # noqa: E501

        Rotation Angle in radians of the text  # noqa: E501

        :return: The angle of this FineTextItem.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this FineTextItem.

        Rotation Angle in radians of the text  # noqa: E501

        :param angle: The angle of this FineTextItem.  # noqa: E501
        :type: float
        """

        self._angle = angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FineTextItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FineTextItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
