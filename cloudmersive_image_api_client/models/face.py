# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Face(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'left_x': 'int',
        'top_y': 'int',
        'right_x': 'int',
        'bottom_y': 'int'
    }

    attribute_map = {
        'left_x': 'LeftX',
        'top_y': 'TopY',
        'right_x': 'RightX',
        'bottom_y': 'BottomY'
    }

    def __init__(self, left_x=None, top_y=None, right_x=None, bottom_y=None):  # noqa: E501
        """Face - a model defined in Swagger"""  # noqa: E501

        self._left_x = None
        self._top_y = None
        self._right_x = None
        self._bottom_y = None
        self.discriminator = None

        if left_x is not None:
            self.left_x = left_x
        if top_y is not None:
            self.top_y = top_y
        if right_x is not None:
            self.right_x = right_x
        if bottom_y is not None:
            self.bottom_y = bottom_y

    @property
    def left_x(self):
        """Gets the left_x of this Face.  # noqa: E501

        X coordinate of the left side of the face  # noqa: E501

        :return: The left_x of this Face.  # noqa: E501
        :rtype: int
        """
        return self._left_x

    @left_x.setter
    def left_x(self, left_x):
        """Sets the left_x of this Face.

        X coordinate of the left side of the face  # noqa: E501

        :param left_x: The left_x of this Face.  # noqa: E501
        :type: int
        """

        self._left_x = left_x

    @property
    def top_y(self):
        """Gets the top_y of this Face.  # noqa: E501

        Y coordinate of the top side of the face  # noqa: E501

        :return: The top_y of this Face.  # noqa: E501
        :rtype: int
        """
        return self._top_y

    @top_y.setter
    def top_y(self, top_y):
        """Sets the top_y of this Face.

        Y coordinate of the top side of the face  # noqa: E501

        :param top_y: The top_y of this Face.  # noqa: E501
        :type: int
        """

        self._top_y = top_y

    @property
    def right_x(self):
        """Gets the right_x of this Face.  # noqa: E501

        X coordinate of the right side of the face  # noqa: E501

        :return: The right_x of this Face.  # noqa: E501
        :rtype: int
        """
        return self._right_x

    @right_x.setter
    def right_x(self, right_x):
        """Sets the right_x of this Face.

        X coordinate of the right side of the face  # noqa: E501

        :param right_x: The right_x of this Face.  # noqa: E501
        :type: int
        """

        self._right_x = right_x

    @property
    def bottom_y(self):
        """Gets the bottom_y of this Face.  # noqa: E501

        Y coordinate of the bottom side of the face  # noqa: E501

        :return: The bottom_y of this Face.  # noqa: E501
        :rtype: int
        """
        return self._bottom_y

    @bottom_y.setter
    def bottom_y(self, bottom_y):
        """Sets the bottom_y of this Face.

        Y coordinate of the bottom side of the face  # noqa: E501

        :param bottom_y: The bottom_y of this Face.  # noqa: E501
        :type: int
        """

        self._bottom_y = bottom_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Face, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Face):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
