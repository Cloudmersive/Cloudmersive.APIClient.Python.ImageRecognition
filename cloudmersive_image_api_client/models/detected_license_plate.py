# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DetectedLicensePlate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_plate_text_best_match': 'str',
        'license_plate_text_runner_up': 'str',
        'location_x': 'int',
        'location_y': 'int',
        'width': 'int',
        'height': 'int',
        'license_plate_recognition_confidence_level': 'float'
    }

    attribute_map = {
        'license_plate_text_best_match': 'LicensePlateText_BestMatch',
        'license_plate_text_runner_up': 'LicensePlateText_RunnerUp',
        'location_x': 'LocationX',
        'location_y': 'LocationY',
        'width': 'Width',
        'height': 'Height',
        'license_plate_recognition_confidence_level': 'LicensePlateRecognitionConfidenceLevel'
    }

    def __init__(self, license_plate_text_best_match=None, license_plate_text_runner_up=None, location_x=None, location_y=None, width=None, height=None, license_plate_recognition_confidence_level=None):  # noqa: E501
        """DetectedLicensePlate - a model defined in Swagger"""  # noqa: E501

        self._license_plate_text_best_match = None
        self._license_plate_text_runner_up = None
        self._location_x = None
        self._location_y = None
        self._width = None
        self._height = None
        self._license_plate_recognition_confidence_level = None
        self.discriminator = None

        if license_plate_text_best_match is not None:
            self.license_plate_text_best_match = license_plate_text_best_match
        if license_plate_text_runner_up is not None:
            self.license_plate_text_runner_up = license_plate_text_runner_up
        if location_x is not None:
            self.location_x = location_x
        if location_y is not None:
            self.location_y = location_y
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if license_plate_recognition_confidence_level is not None:
            self.license_plate_recognition_confidence_level = license_plate_recognition_confidence_level

    @property
    def license_plate_text_best_match(self):
        """Gets the license_plate_text_best_match of this DetectedLicensePlate.  # noqa: E501

        Text from the license plate, highest-confidence result  # noqa: E501

        :return: The license_plate_text_best_match of this DetectedLicensePlate.  # noqa: E501
        :rtype: str
        """
        return self._license_plate_text_best_match

    @license_plate_text_best_match.setter
    def license_plate_text_best_match(self, license_plate_text_best_match):
        """Sets the license_plate_text_best_match of this DetectedLicensePlate.

        Text from the license plate, highest-confidence result  # noqa: E501

        :param license_plate_text_best_match: The license_plate_text_best_match of this DetectedLicensePlate.  # noqa: E501
        :type: str
        """

        self._license_plate_text_best_match = license_plate_text_best_match

    @property
    def license_plate_text_runner_up(self):
        """Gets the license_plate_text_runner_up of this DetectedLicensePlate.  # noqa: E501

        Alternate text from the license plate, based on second-highest-confidence result  # noqa: E501

        :return: The license_plate_text_runner_up of this DetectedLicensePlate.  # noqa: E501
        :rtype: str
        """
        return self._license_plate_text_runner_up

    @license_plate_text_runner_up.setter
    def license_plate_text_runner_up(self, license_plate_text_runner_up):
        """Sets the license_plate_text_runner_up of this DetectedLicensePlate.

        Alternate text from the license plate, based on second-highest-confidence result  # noqa: E501

        :param license_plate_text_runner_up: The license_plate_text_runner_up of this DetectedLicensePlate.  # noqa: E501
        :type: str
        """

        self._license_plate_text_runner_up = license_plate_text_runner_up

    @property
    def location_x(self):
        """Gets the location_x of this DetectedLicensePlate.  # noqa: E501

        X location of the left edge of the license plate, starting from the left edge of the photo (X = 0)  # noqa: E501

        :return: The location_x of this DetectedLicensePlate.  # noqa: E501
        :rtype: int
        """
        return self._location_x

    @location_x.setter
    def location_x(self, location_x):
        """Sets the location_x of this DetectedLicensePlate.

        X location of the left edge of the license plate, starting from the left edge of the photo (X = 0)  # noqa: E501

        :param location_x: The location_x of this DetectedLicensePlate.  # noqa: E501
        :type: int
        """

        self._location_x = location_x

    @property
    def location_y(self):
        """Gets the location_y of this DetectedLicensePlate.  # noqa: E501

        Y location of the top edge of the license plate, starting from the top edge of the photo (Y = 0)  # noqa: E501

        :return: The location_y of this DetectedLicensePlate.  # noqa: E501
        :rtype: int
        """
        return self._location_y

    @location_y.setter
    def location_y(self, location_y):
        """Sets the location_y of this DetectedLicensePlate.

        Y location of the top edge of the license plate, starting from the top edge of the photo (Y = 0)  # noqa: E501

        :param location_y: The location_y of this DetectedLicensePlate.  # noqa: E501
        :type: int
        """

        self._location_y = location_y

    @property
    def width(self):
        """Gets the width of this DetectedLicensePlate.  # noqa: E501

        Width of the license plate's location in pixels  # noqa: E501

        :return: The width of this DetectedLicensePlate.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DetectedLicensePlate.

        Width of the license plate's location in pixels  # noqa: E501

        :param width: The width of this DetectedLicensePlate.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this DetectedLicensePlate.  # noqa: E501

        Height of the license plate's location in pixels  # noqa: E501

        :return: The height of this DetectedLicensePlate.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DetectedLicensePlate.

        Height of the license plate's location in pixels  # noqa: E501

        :param height: The height of this DetectedLicensePlate.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def license_plate_recognition_confidence_level(self):
        """Gets the license_plate_recognition_confidence_level of this DetectedLicensePlate.  # noqa: E501

        Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence  # noqa: E501

        :return: The license_plate_recognition_confidence_level of this DetectedLicensePlate.  # noqa: E501
        :rtype: float
        """
        return self._license_plate_recognition_confidence_level

    @license_plate_recognition_confidence_level.setter
    def license_plate_recognition_confidence_level(self, license_plate_recognition_confidence_level):
        """Sets the license_plate_recognition_confidence_level of this DetectedLicensePlate.

        Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence  # noqa: E501

        :param license_plate_recognition_confidence_level: The license_plate_recognition_confidence_level of this DetectedLicensePlate.  # noqa: E501
        :type: float
        """

        self._license_plate_recognition_confidence_level = license_plate_recognition_confidence_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectedLicensePlate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectedLicensePlate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
