# coding: utf-8

"""
    imageapi

    Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudmersive_image_api_client.models.face import Face  # noqa: F401,E501


class PersonWithGender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'face_location': 'Face',
        'gender_classification_confidence': 'float',
        'gender_class': 'str'
    }

    attribute_map = {
        'face_location': 'FaceLocation',
        'gender_classification_confidence': 'GenderClassificationConfidence',
        'gender_class': 'GenderClass'
    }

    def __init__(self, face_location=None, gender_classification_confidence=None, gender_class=None):  # noqa: E501
        """PersonWithGender - a model defined in Swagger"""  # noqa: E501

        self._face_location = None
        self._gender_classification_confidence = None
        self._gender_class = None
        self.discriminator = None

        if face_location is not None:
            self.face_location = face_location
        if gender_classification_confidence is not None:
            self.gender_classification_confidence = gender_classification_confidence
        if gender_class is not None:
            self.gender_class = gender_class

    @property
    def face_location(self):
        """Gets the face_location of this PersonWithGender.  # noqa: E501

        Location and other information about the person's face corresponding to this age classification  # noqa: E501

        :return: The face_location of this PersonWithGender.  # noqa: E501
        :rtype: Face
        """
        return self._face_location

    @face_location.setter
    def face_location(self, face_location):
        """Sets the face_location of this PersonWithGender.

        Location and other information about the person's face corresponding to this age classification  # noqa: E501

        :param face_location: The face_location of this PersonWithGender.  # noqa: E501
        :type: Face
        """

        self._face_location = face_location

    @property
    def gender_classification_confidence(self):
        """Gets the gender_classification_confidence of this PersonWithGender.  # noqa: E501

        Confidence level of gender classification; possible values are between 0.0 and 1.0; higher is better, with values &gt; 0.50 being high confidence results  # noqa: E501

        :return: The gender_classification_confidence of this PersonWithGender.  # noqa: E501
        :rtype: float
        """
        return self._gender_classification_confidence

    @gender_classification_confidence.setter
    def gender_classification_confidence(self, gender_classification_confidence):
        """Sets the gender_classification_confidence of this PersonWithGender.

        Confidence level of gender classification; possible values are between 0.0 and 1.0; higher is better, with values &gt; 0.50 being high confidence results  # noqa: E501

        :param gender_classification_confidence: The gender_classification_confidence of this PersonWithGender.  # noqa: E501
        :type: float
        """

        self._gender_classification_confidence = gender_classification_confidence

    @property
    def gender_class(self):
        """Gets the gender_class of this PersonWithGender.  # noqa: E501

        The person's identified gender; possible values are \"Male\", \"Female\" and \"Unknown\"  # noqa: E501

        :return: The gender_class of this PersonWithGender.  # noqa: E501
        :rtype: str
        """
        return self._gender_class

    @gender_class.setter
    def gender_class(self, gender_class):
        """Sets the gender_class of this PersonWithGender.

        The person's identified gender; possible values are \"Male\", \"Female\" and \"Unknown\"  # noqa: E501

        :param gender_class: The gender_class of this PersonWithGender.  # noqa: E501
        :type: str
        """

        self._gender_class = gender_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonWithGender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonWithGender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
